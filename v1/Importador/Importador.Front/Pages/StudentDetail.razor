@page "/students/{AlunoId:int}"
@using Importador.Front.Services
@using Importador.Front.Models
@inject IAlunosApi Api
@inject NavigationManager Nav

<!-- topo -->
<div class="section" style="display:flex;align-items:center;gap:10px;margin-top:8px">
    <button class="btn btn-ghost" @onclick="Voltar">
        <span class="material-symbols-outlined">arrow_back</span>
        Voltar
    </button>
</div>

<h2 class="h1">@(_aluno?.Nome ?? "Aluno")</h2>
<p class="sub">
    Matrícula: @_aluno?.Matricula
    @if (ImportId is not null)
    {
        <span class="badge badge-ok" style="margin-left:8px">import @_shortImport</span>
    }
</p>

<!-- cartões de resumo -->
<div class="grid" style="grid-template-columns:repeat(2,1fr);gap:16px">
    <div class="card">
        <div class="card-title with-icon">
            <span class="material-symbols-outlined">trending_up</span>
            Resumo Acadêmico
        </div>
        <div style="display:flex;gap:28px;align-items:center">
            <div>
                <div class="sub">Frequência Média</div>
                <div style="font-size:28px;font-weight:800;margin-top:4px">@_freq</div>
            </div>
            <div>
                <div class="sub">Disciplinas</div>
                <div style="font-size:28px;font-weight:800;margin-top:4px">@_disciplinas</div>
            </div>
        </div>
        <div style="margin-top:14px">
            <span class="badge badge-ok">Aprovado em @_disciplinas disciplinas</span>
        </div>
    </div>

    <div class="card">
        <div class="card-title with-icon">
            <span class="material-symbols-outlined">insights</span>
            Notas por Etapa
        </div>
        <div class="howto sub">Gráfico (em breve)</div>
    </div>
</div>

<!-- tabela escura com toques verdes -->
<div class="section">
    <h3 class="h2">Detalhamento por Disciplina</h3>

    <div class="card table-dark" style="padding:0;">
        <table class="table">
            <thead>
                <tr>
                    <th>Disciplina</th>
                    <th style="width:80px;text-align:center">E1</th>
                    <th style="width:80px;text-align:center">E2</th>
                    <th style="width:80px;text-align:center">E3</th>
                    <th style="width:80px;text-align:center">E4</th>
                    <th style="width:120px;text-align:center">Situação</th>
                </tr>
            </thead>
            <tbody>
                @if (_grid.Count == 0)
                {
                    <tr>
                        <td colspan="6" class="sub" style="padding:18px;">Sem fatos/lançamentos para este aluno.</td>
                    </tr>
                }
                else
                {
                    @foreach (var row in _grid)
                    {
                        <tr>
                            <td class="td-name">@row.Key</td>
                            <td class="td-center">@Fmt(row.Value, 1)</td>
                            <td class="td-center">@Fmt(row.Value, 2)</td>
                            <td class="td-center">@Fmt(row.Value, 3)</td>
                            <td class="td-center">@Fmt(row.Value, 4)</td>
                            <td class="td-center">@Sit(row.Value)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter] public int AlunoId { get; set; }
    [Parameter] public Guid? ImportId { get; set; }

    string _freq = "98.3%";
    int _disciplinas;
    string _shortImport = "";
    AlunoDetalhe? _aluno;
    Dictionary<string, List<AlunoFato>> _grid = new();

    protected override async Task OnParametersSetAsync()
    {
        // lê importId da query
        var qs = new Uri(Nav.Uri).Query;
        var kv = System.Web.HttpUtility.ParseQueryString(qs);
        if (Guid.TryParse(kv.Get("importId"), out var imp)) ImportId = imp;

        _shortImport = ImportId?.ToString()?.Split('-').FirstOrDefault() ?? "";
        _aluno = await Api.GetAlunoAsync(AlunoId, ImportId);

        _grid = _aluno?.Fatos
        .GroupBy(f => f.Disciplina)
        .ToDictionary(g => g.Key, g => g.ToList())
        ?? new();

        _disciplinas = _grid.Count;
    }

    void Voltar()
    {
        if (ImportId is Guid id)
            Nav.NavigateTo($"/imports/{id}");
        else
            Nav.NavigateTo("/imports");
    }

    string Fmt(List<AlunoFato> l, int etapa)
    => (l.FirstOrDefault(x => x.PeriodoAvaliativoId == etapa)?.Nota)?.ToString("0.0") ?? "-";

    RenderFragment Sit(List<AlunoFato> l) => b =>
    {
        var s = l.Select(x => x.Situacao).FirstOrDefault(x => !string.IsNullOrEmpty(x)) ?? "—";
        var css = s == "APR" ? "badge-ok" : "badge-err";
        b.OpenElement(0, "span"); b.AddAttribute(1, "class", $"badge {css}"); b.AddContent(2, s); b.CloseElement();
    };
}
